{"version":3,"sources":["Components/Home/Home.js","Components/About/About.js","Components/Navlist/Navlist.js","Components/Burger/Burger.js","Components/Navbar/Navbar.js","Components/SideDrawer/SideDrawer.js","App.js","i18n.js","serviceWorker.js","index.js"],"names":["Home","t","useTranslation","className","About","NavList","i18n","changeLanguageBtn","lang","changeLanguage","href","id","onChange","lg","document","getElementById","value","onClick","Burger","props","click","Navbar","drawerClickHandler","SideDrawer","drawerClasses","show","App","state","sideDrawerOpen","active","drawerToggleClickHandler","setState","prevState","style","display","transform","marginTop","marginBottom","sideDrawer","this","Component","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","documentElement","checkWhitelist","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","detection","interpolation","escapeValue","Boolean","window","location","hostname","match","ReactDOM","render","fallback","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be063e41.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Home.css\"\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nfunction Home() {\r\n    const {t} = useTranslation();\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {/*<Navbar/>*/}\r\n            <p>{t(\"link1.1\")}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport \"./About.css\"\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"about\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport \"./Navlist.css\"\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\n\r\nfunction NavList()\r\n{\r\n    const {t, i18n} = useTranslation();\r\n\r\n    function changeLanguage() {\r\n        const lg = document.getElementById('lang').value;\r\n        i18n.changeLanguage(lg);\r\n\r\n    }\r\n      function changeLanguageBtn(lang){\r\n        i18n.changeLanguage(lang);\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            <ul>\r\n                <li><a href=\"#\">{t(\"link1.1\")}</a></li>\r\n                <li><a href=\"#\">{t('link2.1')}</a></li>\r\n                <li><a href=\"#\">{t('link3.1')}</a></li>\r\n                <li><a href=\"#\">{t('link4.1')}</a></li>\r\n                <li><select id=\"lang\" onChange={()=>changeLanguage()}>\r\n                    <option value={'pl'}>Polski</option>\r\n                    <option value={'en'}>English</option>\r\n                </select></li>\r\n                <ul id=\"lang2\">\r\n                    <button onClick={()=>changeLanguageBtn('pl')}>Polski</button>\r\n                    <button onClick={()=>changeLanguageBtn('en')}>English</button>\r\n                </ul>\r\n            </ul>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NavList;\r\n\r\n","import React from 'react';\r\nimport './Burger.css'\r\n\r\nconst Burger = props => {\r\n\r\n    return (\r\n        <div className=\"Burger\" id=\"burger\" onClick={props.click}>\r\n            <div id=\"first\"></div>\r\n            <div id=\"secound\"></div>\r\n            <div id=\"third\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Burger;\r\n","import React from 'react';\r\nimport \"./Navbar.css\"\r\nimport NavList from \"../Navlist/Navlist\";\r\nimport Burger from \"../Burger/Burger\";\r\n\r\n\r\n\r\nconst Navbar = props => {\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                {/*<img alt=\"logo\"/>*/}\r\n                <h1>Logo</h1>\r\n            </div>\r\n\r\n            <Burger click={props.drawerClickHandler} />\r\n            <NavList/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\"\r\nimport './SideDrawer.css';\r\nimport NavList from \"../Navlist/Navlist\";\r\n\r\n\r\nconst SideDrawer = props => {\r\n\r\n    let drawerClasses = 'side-drawer';\r\n    if (props.show){\r\n        drawerClasses = 'side-drawer open'\r\n    }\r\n\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <NavList/>\r\n        </nav>\r\n\r\n    );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Home from \"./Components/Home/Home\";\r\nimport About from \"./Components/About/About\";\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport SideDrawer from \"./Components/SideDrawer/SideDrawer\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        sideDrawerOpen: false,\r\n        active: false\r\n    };\r\n\r\n    drawerToggleClickHandler = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                sideDrawerOpen: !prevState.sideDrawerOpen,\r\n            };\r\n        });\r\n        this.setState((prevState) => {\r\n            return {\r\n                active: !prevState.active\r\n            }\r\n        });\r\n        if (!this.state.active) {\r\n            document.getElementById('secound').style.display = \"none\";\r\n            document.getElementById('first').style.transform = \"translateY(8px) rotate(45deg)\";\r\n            // document.getElementById('first').style.marginTop= \"15px\";\r\n\r\n            document.getElementById('third').style.transform = \"translateY(-8px) rotate(-45deg)\";\r\n            // document.getElementById('third').style.marginBottom= \"15px\";\r\n\r\n        } else {\r\n            document.getElementById('secound').style.display = \"block\";\r\n            document.getElementById('first').style.transform = \"rotate(180deg)\";\r\n            document.getElementById('first').style.marginTop = \"0\";\r\n            document.getElementById('third').style.transform = \"rotate(0)\";\r\n            document.getElementById('third').style.marginBottom = \"0\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let sideDrawer;\r\n\r\n        if (this.state.sideDrawerOpen) {\r\n            sideDrawer = <SideDrawer show={this.state.sideDrawerOpen}/>\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <Home/>\r\n                <Navbar drawerClickHandler={this.drawerToggleClickHandler}/>\r\n                {sideDrawer}\r\n                <About/>\r\n                <Home/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nconst fallbackLng = ['en'];\r\nconst availableLanguages = ['en', 'pl'];\r\n\r\n\r\nconst options = {\r\n  // order and from where user language should be detected\r\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n\r\n  // keys or params to lookup language from\r\n  lookupQuerystring: 'lng',\r\n  lookupCookie: 'i18next',\r\n  lookupLocalStorage: 'i18nextLng',\r\n  lookupFromPathIndex: 0,\r\n  lookupFromSubdomainIndex: 0,\r\n\r\n  // cache user language on\r\n  caches: ['localStorage', 'cookie'],\r\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\r\n\r\n  // optional expire and domain for set cookie\r\n  cookieMinutes: 10,\r\n  cookieDomain: 'myDomain',\r\n\r\n  // optional htmlTag with lang attribute, the default is:\r\n  htmlTag: document.documentElement,\r\n\r\n  // only detect languages that are in the whitelist\r\n  checkWhitelist: true\r\n}\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: true,\r\n    whitelist: availableLanguages,\r\n    detection: options,\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport './i18n';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Suspense fallback={(<div>Loading</div>)}>\r\n        <App />\r\n    </Suspense>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}