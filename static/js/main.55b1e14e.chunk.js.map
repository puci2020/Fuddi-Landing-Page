{"version":3,"sources":["Components/Home/Home.js","Components/About/About.js","Components/Navlist/Navlist.js","Components/Burger/Burger.js","Components/Navbar/Navbar.js","Components/SideDrawer/SideDrawer.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","About","NavList","href","Burger","props","id","onClick","click","Navbar","drawerClickHandler","SideDrawer","drawerClasses","show","App","state","sideDrawerOpen","active","drawerToggleClickHandler","setState","prevState","document","getElementById","style","display","transform","marginTop","marginBottom","sideDrawer","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAYeA,MARf,WACI,OACI,yBAAKC,UAAU,U,MCIRC,MAPf,WACI,OACI,yBAAKD,UAAU,W,YCaRE,MAff,WAEI,OACI,yBAAKF,UAAU,OACX,4BACI,4BAAI,uBAAGG,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,qBACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,WCGLC,G,MAXA,SAAAC,GAEX,OACI,yBAAKL,UAAU,SAASM,GAAG,SAASC,QAASF,EAAMG,OAC/C,yBAAKF,GAAG,UACR,yBAAKA,GAAG,YACR,yBAAKA,GAAG,aCYLG,EAdA,SAAAJ,GACX,OACI,gCACI,yBAAKL,UAAU,QAEX,qCAGJ,kBAAC,EAAD,CAAQQ,MAAOH,EAAMK,qBACrB,kBAAC,EAAD,QCIGC,G,MAfI,SAAAN,GAEf,IAAIO,EAAgB,cAKpB,OAJIP,EAAMQ,OACND,EAAgB,oBAIhB,yBAAKZ,UAAWY,GACZ,kBAAC,EAAD,SC6CGE,E,4MAnDXC,MAAQ,CACJC,gBAAgB,EAChBC,QAAQ,G,EAGZC,yBAA2B,WACvB,EAAKC,UAAS,SAACC,GACX,MAAO,CACHJ,gBAAiBI,EAAUJ,mBAGnC,EAAKG,UAAS,SAACC,GACX,MAAO,CACHH,QAASG,EAAUH,WAGtB,EAAKF,MAAME,QASZI,SAASC,eAAe,WAAWC,MAAMC,QAAU,QACnDH,SAASC,eAAe,SAASC,MAAME,UAAY,iBACnDJ,SAASC,eAAe,SAASC,MAAMG,UAAY,IACnDL,SAASC,eAAe,SAASC,MAAME,UAAY,YACnDJ,SAASC,eAAe,SAASC,MAAMI,aAAe,MAZtDN,SAASC,eAAe,WAAWC,MAAMC,QAAU,OACnDH,SAASC,eAAe,SAASC,MAAME,UAAY,gCAGnDJ,SAASC,eAAe,SAASC,MAAME,UAAY,oC,uDAavD,IAAIG,EAKJ,OAHIC,KAAKd,MAAMC,iBACXY,EAAa,kBAAC,EAAD,CAAYf,KAAMgB,KAAKd,MAAMC,kBAG1C,yBAAKhB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQU,mBAAoBmB,KAAKX,2BAChCU,EACD,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA9CEE,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55b1e14e.chunk.js","sourcesContent":["import React from 'react';\r\n// import Navbar from \"../Navbar/Navbar\";\r\nimport \"./Home.css\"\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"home\">\r\n            {/*<Navbar/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport \"./About.css\"\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"about\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport \"./Navlist.css\"\r\n\r\nfunction NavList()\r\n{\r\n    return (\r\n        <div className=\"nav\">\r\n            <ul>\r\n                <li><a href=\"#\">Home</a></li>\r\n                <li><a href=\"#\">Droga do sukcesu</a></li>\r\n                <li><a href=\"#\">O Nas</a></li>\r\n                <li><a href=\"#\">FAQ</a></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NavList;\r\n\r\n","import React from 'react';\r\nimport './Burger.css'\r\n\r\nconst Burger = props => {\r\n\r\n    return (\r\n        <div className=\"Burger\" id=\"burger\" onClick={props.click}>\r\n            <div id=\"first\"></div>\r\n            <div id=\"secound\"></div>\r\n            <div id=\"third\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Burger;\r\n","import React from 'react';\r\nimport \"./Navbar.css\"\r\nimport NavList from \"../Navlist/Navlist\";\r\nimport Burger from \"../Burger/Burger\";\r\n\r\n\r\n\r\nconst Navbar = props => {\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                {/*<img alt=\"logo\"/>*/}\r\n                <h1>Logo</h1>\r\n            </div>\r\n\r\n            <Burger click={props.drawerClickHandler} />\r\n            <NavList/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\"\r\nimport './SideDrawer.css';\r\nimport NavList from \"../Navlist/Navlist\";\r\n\r\n\r\nconst SideDrawer = props => {\r\n\r\n    let drawerClasses = 'side-drawer';\r\n    if (props.show){\r\n        drawerClasses = 'side-drawer open'\r\n    }\r\n\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <NavList/>\r\n        </nav>\r\n\r\n    );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Home from \"./Components/Home/Home\";\nimport About from \"./Components/About/About\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport SideDrawer from \"./Components/SideDrawer/SideDrawer\";\n\nclass App extends Component {\n    state = {\n        sideDrawerOpen: false,\n        active: false\n    };\n\n    drawerToggleClickHandler = () => {\n        this.setState((prevState) => {\n            return {\n                sideDrawerOpen: !prevState.sideDrawerOpen,\n            };\n        });\n        this.setState((prevState) => {\n            return {\n                active: !prevState.active\n            }\n        });\n        if (!this.state.active) {\n            document.getElementById('secound').style.display = \"none\";\n            document.getElementById('first').style.transform = \"translateY(8px) rotate(45deg)\";\n            // document.getElementById('first').style.marginTop= \"15px\";\n\n            document.getElementById('third').style.transform = \"translateY(-8px) rotate(-45deg)\";\n            // document.getElementById('third').style.marginBottom= \"15px\";\n\n        } else {\n            document.getElementById('secound').style.display = \"block\";\n            document.getElementById('first').style.transform = \"rotate(180deg)\";\n            document.getElementById('first').style.marginTop = \"0\";\n            document.getElementById('third').style.transform = \"rotate(0)\";\n            document.getElementById('third').style.marginBottom = \"0\";\n        }\n    };\n\n    render() {\n        let sideDrawer;\n\n        if (this.state.sideDrawerOpen) {\n            sideDrawer = <SideDrawer show={this.state.sideDrawerOpen}/>\n        }\n        return (\n            <div className=\"App\">\n                <Home/>\n                <Navbar drawerClickHandler={this.drawerToggleClickHandler}/>\n                {sideDrawer}\n                <About/>\n                <Home/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}